# Production docker-compose configuration
version: '3.8'

services:
  dr3am:
    build:
      context: .
      target: production
    container_name: dr3am-prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://dr3am:${DB_PASSWORD}@postgres:5432/dr3am
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
      - LOG_TO_CONSOLE=true
      - LOG_TO_FILE=true
      - LOG_FILE=/app/logs/dr3am.log
      - LOG_FORMAT=json
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECKS=true
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - dr3am-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  postgres:
    image: postgres:15-alpine
    container_name: dr3am-postgres-prod
    environment:
      - POSTGRES_DB=dr3am
      - POSTGRES_USER=dr3am
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dr3am-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: dr3am-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - dr3am-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  nginx:
    image: nginx:alpine
    container_name: dr3am-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - dr3am
    networks:
      - dr3am-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: dr3am-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dr3am-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: dr3am-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dr3am-network
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: dr3am-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - dr3am-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: dr3am-promtail-prod
    volumes:
      - ./logs:/var/log/dr3am
      - ./config/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - dr3am-network
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  dr3am-network:
    driver: bridge